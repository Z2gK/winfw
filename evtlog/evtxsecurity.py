import argparse
import pandas as pd

# Taken from the output of evtxeventid
securityevts = {1100: 'Event logging service has shut down', 4624: 'Successful log on', 4625: 'Failed log on', 4634: 'Account log off', 4648: 'Log on attempt with explicit credentials', 4719: 'System audit policy change', 4726: 'A user account was deleted', 4964: 'Special group assigned to new log on attempt', 1102: 'Audit log cleared', 4720: 'New user account created', 4722: 'User account enabled', 4723: 'Attempt to change password', 4725: 'User account disabled', 4728: 'User added to privileged global group', 4732: 'User added to privileged local group', 4756: 'User was added to privileged universal group', 4738: 'Change to user account', 4740: 'User locked out of an account', 4767: 'User account unlocked', 4735: 'Change to privileged local group', 4737: 'Change to privileged global group', 4755: 'Change to universal group', 4772: 'Failed request for Kerberos ticket', 4777: 'Domain controller failed to validate credentials', 4782: 'Account password hash accessed', 4616: 'System time changed', 4657: 'Change to registry value', 4697: 'Service install attempt', 4946: 'Rule added to Windows Firewall exception', 4947: 'Rule modified in Windows Firewall exception', 4950: 'Windows Firewall settings change', 4954: 'Change to Windows Firewall Group Policy', 4724: 'An attempt was made to reset an accounts password', 4704: 'A user right was assigned', 4717: 'System security access was granted to an account', 4739: 'Domain Policy was changed', 4698: 'A scheduled task was created', 4699: 'A scheduled task was deleted', 4700: 'A scheduled task was enabled', 4701: 'A scheduled task was disabled', 4702: 'A scheduled task was updated'}
fwevts = {5025: 'Windows Firewall service stopped', 5031: 'Application blocked by Windows Firewall from accepting traffic', 5155: 'Windows Filtering Platform blocked a service from listening on a port', 5152: 'The Windows Filtering Platform blocked a packet', 5153: 'A more restrictive Windows Filtering Platform filter has blocked a packet', 5157: 'Windows Filtering Platform blocked a connection', 5447: 'A Windows Filtering Platform filter was changed'}
systemevts = {1: 'System time changed', 12: 'OS startup time', 13: 'OS Shutdown time', 19: 'Windows Update complete installation', 43: 'Windows Update start installation',  104: 'Application log cleared', 6005: 'Eventlog service started', 6006: 'Eventlog service stopped', 6013: 'System uptime since last boot'}

parser = argparse.ArgumentParser(description="Exploration of Windows Security Event Log generated by the Powershell command: get-winevent -Path log.evtx | export-csv -delimiter ';' log.csv")
parser.add_argument("filename", type=str, help="name of csv file")
parser.add_argument("-d","--date", help="Date range in YYYYMM-YYYYMM (inclusive) format. If the start (or end) is omitted, the summary will be from the earliest (or latest) entries. If this argument is not specified, the default behaviours is to take the entire log file")

args = parser.parse_args()
filename = args.filename

df = pd.read_csv(filename, sep=";", index_col=False, skiprows=1)
print("\n---- [Full Data Set] Exploration of Raw Data Set ----")
print(df.info())
# print(df.head())

print("\n---- [Full Data Set] Dimensions ----")
print(df.shape)

print("\n---- [Full Data Set] Column Names ----")
print(df.columns)

# Pick only the useful columns
# May still need to re-cast certain columns, esp the date (TimeCreated)
df1 = df[['Message', 'Id', 'Version', 'Qualifiers', 'Level', 'Task', 'Opcode','Keywords', 'RecordId', 'ProviderName', 'ProviderId', 'ProcessId', 'ThreadId', 'MachineName', 'UserId', 'TimeCreated','LevelDisplayName', 'OpcodeDisplayName', 'TaskDisplayName']].copy()


#Recasting
# can't just let pandas figure out how to cast dates on its own
df1['TimeCreated'] = pd.to_datetime(df1.TimeCreated, format='%d/%m/%Y %I:%M:%S %p')

# Date filter - might be buggy
if args.date:
    # print(args.date)
    [start, end] = args.date.split("-")
    # date end point defaults to exclusive in filter regardless of inequality type, so need to bump up a month
    if end[4:6] == "12":
        end = str(int(end[0:4])+1) + "01"
    else:
        end = end[0:4] + str(int(end[4:6]) + 1).zfill(2)

    if start and (not end):
        df2 = df1[df1["TimeCreated"] >= (start[0:4] + "-" + start[4:6])]
    elif end and (not start):
        df2 = df1[df1["TimeCreated"] <= end[0:4] + "-"+ end[4:6]]
    elif end and start:
        df2 = df1[(df1["TimeCreated"] >= start[0:4] + "-"+ start[4:6]) & (df1["TimeCreated"] <= end[0:4] + "-" + end[4:6])]
    else:
        df2 = df1
else:
    df2 = df1


# Count number of events with certain event IDs
print("\n---- [Filtered Data Set] Event IDs and their event counts ----")
print(df2["Id"].value_counts())    

uniqueids = set(df["Id"].unique())
idsinsecevts = dict()
for i in uniqueids:
    if i in securityevts:
        idsinsecevts[i] = securityevts[i]
        
print("\n---- [Filtered Data Set] Event IDs of security concern ----")
print(idsinsecevts)

#print("\n---- [Filtered Data Set] Specific events of interest ----")
# Specific events of interest - quite cumbersome to filter by date when it is not the index
# df3 = df2[(df2["Id"] == 4648) ]
# df3 = df2[(df2["TimeCreated"] > '2020-02-01 12:00:00 AM')]

#df3 = df2[(df2["Id"] == 4648) & (df2["TimeCreated"] > '2020-02-01 12:00:00 AM') & (df2["TimeCreated"] < '2020-03-01 12:00:00 AM')]
#print(df3.info())
#print(df3.shape)
#for s in set(df3["Message"]):
#   print(s)
